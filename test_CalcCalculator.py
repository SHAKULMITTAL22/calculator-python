# ********RoostGPT********
"""
Test generated by RoostGPT for test oct25-test using AI Type  and AI Model 

ROOST_METHOD_HASH=calculator_9ebd2df6b3
ROOST_METHOD_SIG_HASH=calculator_ad84dc0779


Scenario 1: Addition Operation
Details:
  TestName: test_calculator_addition
  Description: This test verifies that the calculator correctly performs addition when the '+' operation is specified.
Execution:
  Arrange: Prepare two numbers, `num1` and `num2`, to be added together.
  Act: Invoke the `calculator` function with `num1`, `num2`, and the '+' operation.
  Assert: Check that the result matches the expected sum of `num1` and `num2`.
Validation:
  This test is crucial to ensure that the calculator correctly delegates the addition operation to the `addition` function, adhering to the function's specification for handling the '+' operation.

Scenario 2: Subtraction Operation
Details:
  TestName: test_calculator_subtraction
  Description: This test checks that the calculator correctly performs subtraction when the '-' operation is specified.
Execution:
  Arrange: Prepare two numbers, `num1` and `num2`, for subtraction.
  Act: Call the `calculator` function with `num1`, `num2`, and the '-' operation.
  Assert: Ensure that the result is the difference between `num1` and `num2`.
Validation:
  Ensuring the correct execution of subtraction is essential to validate that the calculator correctly delegates to the `subtraction` function when the '-' operation is requested.

Scenario 3: Multiplication Operation
Details:
  TestName: test_calculator_multiplication
  Description: This test ensures that the calculator correctly performs multiplication when the '*' operation is specified.
Execution:
  Arrange: Prepare two numbers, `num1` and `num2`, to be multiplied.
  Act: Invoke the `calculator` function with `num1`, `num2`, and the '*' operation.
  Assert: Verify that the result is the product of `num1` and `num2`.
Validation:
  The test ensures the multiplication functionality is correctly routed to the `multiplication` function, which is crucial for the calculator's correct operation.

Scenario 4: Division Operation
Details:
  TestName: test_calculator_division
  Description: This test verifies that the calculator performs division correctly when the '/' operation is specified and handles division by zero.
Execution:
  Arrange: Prepare two numbers, `num1` and `num2`, where `num2` is not zero, and another scenario where `num2` is zero.
  Act: Call the `calculator` function with `num1`, `num2`, and the '/' operation.
  Assert: Check that the result is the quotient when `num2` is not zero, and "Cannot divide by zero" when `num2` is zero.
Validation:
  This test is vital to confirm that the calculator delegates division to the `division` function and handles edge cases like division by zero appropriately.

Scenario 5: Invalid Operation
Details:
  TestName: test_calculator_invalid_operation
  Description: This test ensures that the calculator returns an appropriate error message when an invalid operation is specified.
Execution:
  Arrange: Prepare two numbers, `num1` and `num2`, and an invalid operation string.
  Act: Invoke the `calculator` function with `num1`, `num2`, and an invalid operation.
  Assert: Verify that the result is "Invalid operation".
Validation:
  Testing invalid operations ensures the calculator can handle user errors gracefully and provides feedback when an unsupported operation is requested, aligning with expected error-handling behavior.
"""

# ********RoostGPT********
import pytest
from calc import calculator

class Test_CalcCalculator:

    @pytest.mark.positive
    def test_calculator_addition(self):
        # Arrange
        num1 = 10
        num2 = 5
        operation = '+'
        expected_result = 15
        
        # Act
        result = calculator(num1, num2, operation)
        
        # Assert
        assert result == expected_result, f"Expected {expected_result}, but got {result}"

    @pytest.mark.positive
    def test_calculator_subtraction(self):
        # Arrange
        num1 = 10
        num2 = 5
        operation = '-'
        expected_result = 5
        
        # Act
        result = calculator(num1, num2, operation)
        
        # Assert
        assert result == expected_result, f"Expected {expected_result}, but got {result}"

    @pytest.mark.positive
    def test_calculator_multiplication(self):
        # Arrange
        num1 = 10
        num2 = 5
        operation = '*'
        expected_result = 50
        
        # Act
        result = calculator(num1, num2, operation)
        
        # Assert
        assert result == expected_result, f"Expected {expected_result}, but got {result}"

    @pytest.mark.regression
    def test_calculator_division(self):
        # Arrange
        num1 = 10
        num2 = 5
        operation = '/'
        expected_result = 2
        
        # Act
        result = calculator(num1, num2, operation)
        
        # Assert
        assert result == expected_result, f"Expected {expected_result}, but got {result}"

    @pytest.mark.negative
    def test_calculator_division_by_zero(self):
        # Arrange
        num1 = 10
        num2 = 0
        operation = '/'
        expected_result = "Cannot divide by zero"
        
        # Act
        result = calculator(num1, num2, operation)
        
        # Assert
        assert result == expected_result, f"Expected {expected_result}, but got {result}"

    @pytest.mark.invalid
    def test_calculator_invalid_operation(self):
        # Arrange
        num1 = 10
        num2 = 5
        operation = 'invalid'  # TODO: Change this to any invalid operation string as needed
        expected_result = "Invalid operation"
        
        # Act
        result = calculator(num1, num2, operation)
        
        # Assert
        assert result == expected_result, f"Expected {expected_result}, but got {result}"
